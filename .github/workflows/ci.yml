# .github/workflows/ci.yml

name: CI â€“ Dynamic Test Runner

on:
  push:
    paths:
      - 'bin/**'
      - 'tests/**'
  pull_request:
    paths:
      - 'bin/**'
      - 'tests/**'

jobs:
  run-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          # We need the full history so that git diff works properly.
          fetch-depth: 0

      - name: Install bats
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y bats

      - name: Determine changed test files
        id: changed-tests
        shell: bash
        run: |
          # Determine the base commit.
          # For pull requests, the environment variable GITHUB_BASE_REF is set to the target branch.
          BASE=origin/main
          if [ -n "$GITHUB_BASE_REF" ]; then
            BASE=$(git rev-parse "$GITHUB_BASE_REF")
          fi
          echo "Comparing changes between base commit: $BASE and HEAD: $GITHUB_SHA"
          
          # List changed files (only those in bin/ and tests/ are in the checkout because of the trigger).
          changed_files=$(git diff --name-only "$BASE" "$GITHUB_SHA")
          echo "Changed files: $changed_files"
          
          # Initialize an empty array to collect test files.
          test_files=()
          
          # Process each changed file. If a file in bin/ was changed, map it to its corresponding test file.
          for f in $changed_files; do
            if [[ "$f" == bin/* ]]; then
              filename=$(basename "$f")
              # Strip the .sh extension and prepend tests/ directory.
              test_file="tests/${filename%.sh}.bats"
              if [ -f "$test_file" ]; then
                test_files+=("$test_file")
              fi
            elif [[ "$f" == tests/*.bats ]]; then
              # If a test file was changed, include it as well.
              test_files+=("$f")
            fi
          done
          
          # Remove duplicate entries.
          readarray -t unique_tests < <(printf "%s\n" "${test_files[@]}" | sort -u)
          
          # If no test file was found, run all tests.
          if [ ${#unique_tests[@]} -eq 0 ]; then
            echo "No specific tests were identified based on the changes. Running all tests."
            unique_tests=(tests/*.bats)
          fi
          
          # Output the list of tests.
          echo "Test files selected: ${unique_tests[@]}"
          echo "TEST_FILES=${unique_tests[*]}" >> $GITHUB_OUTPUT

      - name: Run changed tests
        run: |
          echo "Running tests: $TEST_FILES"
          bats $TEST_FILES
        env:
          TEST_FILES: ${{ steps.changed-tests.outputs.TEST_FILES }}
