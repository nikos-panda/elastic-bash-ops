# .github/workflows/ci.yml

name: CI â€“ Dynamic Test Runner

on:
  push:
    paths:
      - 'bin/**'
      - 'tests/**'
  pull_request:
    paths:
      - 'bin/**'
      - 'tests/**'

jobs:
  run-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          # We need the full history so that git diff works properly.
          fetch-depth: 0

      - name: Install bats
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y bats

      - name: Determine changed test files
        id: changed-tests
        shell: bash
        run: |
          # Determine the base commit for diffing.
          if [ "$GITHUB_EVENT_NAME" = "pull_request" ]; then
            # For pull requests, use the target branch from GITHUB_BASE_REF.
            BASE=$(git rev-parse "$GITHUB_BASE_REF")
          else
            # For push events, check if GITHUB_EVENT_BEFORE is valid.
            if [ -z "${GITHUB_EVENT_BEFORE}" ] || [ "$GITHUB_EVENT_BEFORE" = "0000000000000000000000000000000000000000" ]; then
              # Fallback for cases like the first commit on a branch.
              BASE=$(git rev-parse origin/main)
            else
              BASE=$(git rev-parse "$GITHUB_EVENT_BEFORE")
            fi
          fi

          echo "Comparing changes between base commit: $BASE and HEAD: $GITHUB_SHA"

          # Get the list of changed files between BASE and HEAD.
          changed_files=$(git diff --name-only "$BASE" "$GITHUB_SHA" || true)
          echo "Changed files: $changed_files"

          # Build a list of test files corresponding to modified bin/ scripts or tests/.
          test_files=()
          for f in $changed_files; do
            if [[ "$f" == bin/* ]]; then
              filename=$(basename "$f")
              # Map, for example: bin/script.sh -> tests/script.bats
              test_file="tests/${filename%.sh}.bats"
              if [ -f "$test_file" ]; then
                test_files+=("$test_file")
              fi
            elif [[ "$f" == tests/*.bats ]]; then
              test_files+=("$f")
            fi
          done

          # Remove duplicates.
          readarray -t unique_tests < <(printf "%s\n" "${test_files[@]}" | sort -u)

          # Run all tests if no individual test was detected.
          if [ ${#unique_tests[@]} -eq 0 ]; then
            echo "No specific tests identified based on the changes. Running all tests."
            unique_tests=(tests/*.bats)
          fi

          echo "Test files selected: ${unique_tests[@]}"
          echo "TEST_FILES=${unique_tests[*]}" >> "$GITHUB_OUTPUT"

      - name: Run changed tests
        run: |
          echo "Running tests: $TEST_FILES"
          bats $TEST_FILES
        env:
          TEST_FILES: ${{ steps.changed-tests.outputs.TEST_FILES }}
