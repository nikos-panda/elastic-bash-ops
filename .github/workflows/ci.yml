# .github/workflows/ci.yml

name: CI â€“ Dynamic Test Runner

on:
  push:
    paths:
      - 'bin/**'
      - 'tests/**'
  pull_request:
    paths:
      - 'bin/**'
      - 'tests/**'

jobs:
  run-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install bats
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y bats

      - name: Determine changed test files
        id: changed-tests
        shell: bash
        run: |
          # Determine a base commit to diff against.
          # For pull requests, we use the merge-base of HEAD and the target branch.
          # For push events, if pushing to main then use HEAD~1 (if available), otherwise use merge-base between HEAD and origin/main.
          if [ "$GITHUB_EVENT_NAME" = "pull_request" ]; then
            echo "Pull request detected. GITHUB_BASE_REF: $GITHUB_BASE_REF"
            BASE=$(git merge-base HEAD origin/"$GITHUB_BASE_REF")
          else
            echo "Push event on ref: $GITHUB_REF"
            if [[ "$GITHUB_REF" == "refs/heads/main" ]]; then
              if git rev-parse HEAD~1 >/dev/null 2>&1; then
                BASE=$(git rev-parse HEAD~1)
              else
                BASE=""
              fi
            else
              BASE=$(git merge-base HEAD origin/main)
            fi
          fi

          if [ -z "$BASE" ]; then
            echo "No valid base commit found. Running all tests."
            changed_files=$(git ls-files | grep -E '^(bin/|tests/)')
          else
            echo "Comparing changes between base commit: $BASE and HEAD: $GITHUB_SHA"
            changed_files=$(git diff --name-only "$BASE" HEAD || true)
          fi

          echo "Changed files:"
          echo "$changed_files"

          # Build a list of test files to run based on changes.
          test_files=()
          for f in $changed_files; do
            if [[ "$f" == bin/* ]]; then
              filename=$(basename "$f")
              # Convert bin/script.sh to tests/script.bats.
              test_file="tests/${filename%.sh}.bats"
              if [ -f "$test_file" ]; then
                test_files+=("$test_file")
              fi
            elif [[ "$f" == tests/*.bats ]]; then
              test_files+=("$f")
            fi
          done

          # Remove duplicates.
          readarray -t unique_tests < <(printf "%s\n" "${test_files[@]}" | sort -u)

          if [ ${#unique_tests[@]} -eq 0 ]; then
            echo "No specific test files identified based on diff. Running all tests."
            unique_tests=(tests/*.bats)
          fi

          echo "Test files selected: ${unique_tests[@]}"
          echo "TEST_FILES=${unique_tests[*]}" >> "$GITHUB_OUTPUT"

      - name: Run changed tests
        run: |
          echo "Running tests: $TEST_FILES"
          bats $TEST_FILES
        env:
          TEST_FILES: ${{ steps.changed-tests.outputs.TEST_FILES }}
